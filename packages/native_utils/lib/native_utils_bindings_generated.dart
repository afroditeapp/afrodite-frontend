// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/native_utils.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NativeUtilsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeUtilsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeUtilsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Generate a new content encryption key.
  ///
  /// The buffer for key generation must be 32 bytes long.
  ///
  /// The buffer can contain random data as it will be overwritten.
  ///
  /// Returns 0 if operation was successful.
  int generate_content_encryption_key(
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _generate_content_encryption_key(
      key,
      key_len,
    );
  }

  late final _generate_content_encryption_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('generate_content_encryption_key');
  late final _generate_content_encryption_key =
      _generate_content_encryption_keyPtr
          .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);

  /// Replace plaintext with chiphertext and nonce.
  ///
  /// Data buffer needs to have 28 bytes empty space at the end.
  ///
  /// The buffer can contain random data as it will be overwritten.
  ///
  /// Returns 0 if operation was successful.
  int encrypt_content(
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _encrypt_content(
      data,
      data_len,
      key,
      key_len,
    );
  }

  late final _encrypt_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr,
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('encrypt_content');
  late final _encrypt_content = _encrypt_contentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          int)>(isLeaf: true);

  /// Replace chiphertext and nonce with plaintext data.
  ///
  /// The plaintext data is 28 bytes shorter than the data buffer size.
  ///
  /// Returns 0 if operation was successful.
  int decrypt_content(
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _decrypt_content(
      data,
      data_len,
      key,
      key_len,
    );
  }

  late final _decrypt_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr,
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('decrypt_content');
  late final _decrypt_content = _decrypt_contentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          int)>(isLeaf: true);
}
